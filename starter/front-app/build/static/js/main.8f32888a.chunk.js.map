{"version":3,"sources":["components/connection/Login.js","components/connection/Signup.js","components/connection/Connection.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","event","target","setState","name","value","handleSubmit","preventDefault","data","FormData","email","get","password","customCheck1","hash","MD5","toString","dataForm","console","log","options","method","headers","mode","body","JSON","stringify","fetch","state","onSubmit","this","className","htmlFor","id","type","placeholder","onChange","href","React","Component","Signup","firstname","lastname","company","customCheck2","legal","Connection","to","src","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f32888a.chunk.js","sourcesContent":["import React from 'react';\nimport MD5 from '../../../node_modules/crypto-js/md5.js';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email : '',\n      password : '',\n      customCheck1 : ''\n    }\n\n  }\n\n  handleChange = (event) => {\n\n    const {target} = event;\n\n    this.setState({\n      [target.name] : target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const data = new FormData(event.target);\n\n    const email = data.get(\"email\");\n    const password = data.get(\"password\");\n    const customCheck1 = data.get(\"customCheck1\");\n\n    // CRYPT Password\n    var hash = MD5(password).toString();\n\n    const dataForm = {\n      email : email,\n      password : hash,\n      customCheck1 : customCheck1\n    }\n\n    console.log(\"Je submite et recupere les données : \");\n    console.log(data.get(\"email\"));\n    console.log(hash);\n\n\n    const options = {\n      method : 'POST',\n      headers : {\n        'Accept' : 'application/json',\n        'Content-Type' : 'application/json'\n      },\n      options : {\n        mode : 'no-cors'\n      },\n      body : JSON.stringify(dataForm)\n    };\n\n    const urlApi = 'http://localhost:5000/api/login';\n\n    fetch(urlApi, options)\n  }\n\n  render(){\n    return (\n      <form onSubmit={this.handleSubmit}>\n          <h3>Sign In</h3>\n\n          <div className=\"form-group\">\n              <label htmlFor=\"email\">Email address</label>\n              <input id=\"email\" name=\"email\" type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={this.handleChange} />\n          </div>\n\n          <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input id=\"password\" name=\"password\" type=\"password\" className=\"form-control\" placeholder=\"Enter password\"  onChange={this.handleChange} />\n          </div>\n\n          <div className=\"form-group\">\n              <div className=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                  <label className=\"custom-control-label\" htmlFor=\"customCheck1\"  onChange={this.handleChange}>Remember me</label>\n              </div>\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n          <p className=\"forgot-password text-right\">\n              Forgot <a href=\"#\">password?</a>\n          </p>\n      </form>\n    )\n  }\n}\n\n\nexport default Login;\n","import React from 'react';\nimport MD5 from '../../../node_modules/crypto-js/md5.js';\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataForm : ''\n    }\n\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const data = new FormData(event.target);\n\n    const firstname = data.get(\"firstname\");\n    const lastname = data.get(\"lastname\");\n    const email = data.get(\"email\");\n    const company = data.get(\"company\");\n    const password = data.get(\"password\");\n    const customCheck2 = data.get(\"customCheck2\");\n\n    // CRYPT Password\n    var hash = MD5(password).toString();\n\n    const dataForm = {\n      firstname : firstname,\n      lastname : lastname,\n      email : email,\n      company : company,\n      password : hash,\n      legal : customCheck2\n    }\n\n    console.log(\"Je submite et recupere les données : \");\n    console.log(firstname, lastname);\n    console.log(hash);\n\n\n    const options = {\n      method : 'POST',\n      headers : {\n        'Accept' : 'application/json',\n        'Content-Type' : 'application/json'\n      },\n      options : {\n        mode : 'no-cors'\n      },\n      body : JSON.stringify(dataForm)\n    };\n\n    const urlApi = 'http://localhost:5000/api/signup';\n\n    fetch(urlApi, options)\n  }\n\n  render(){\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h3>Sign Up</h3>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"firstname\" >First name</label>\n          <input id=\"firstname\" name=\"firstname\" type=\"text\" className=\"form-control\" placeholder=\"First name\" />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"lastname\">Last name</label>\n          <input id=\"lastname\" name=\"lastname\" type=\"text\" className=\"form-control\" placeholder=\"Last name\" />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email address</label>\n          <input id=\"email\" name=\"email\" type=\"email\" className=\"form-control\" placeholder=\"Enter email\" />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"company\">Company</label>\n          <input id=\"company\" name=\"company\" type=\"text\" className=\"form-control\" placeholder=\"Company\" />\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"paswword\">Password</label>\n          <input id=\"password\" name=\"password\" type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n        </div>\n\n        <div className=\"form-group\">\n            <div className=\"custom-control custom-checkbox\">\n                <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck2\" />\n                <label className=\"custom-control-label\" htmlFor=\"customCheck2\">Accept legal mentions</label>\n            </div>\n        </div>\n\n        <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n\n        <p className=\"forgot-password text-right\">\n          Already registered <a href=\"#\">sign in?</a>\n        </p>\n\n      </form>\n    )\n  }\n}\n\n\nexport default Signup;\n","import React from 'react';\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Login from \"./Login.js\";\nimport Signup from \"./Signup.js\";\n\nfunction Connection() {\n  return (<Router>\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Login</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-up\"}>Sign up</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <img src=\"/mutatis-logo.png\"></img>\n      </nav>\n\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Switch>\n            <Route exact path='/' component={Login} />\n            <Route path=\"/sign-in\" component={Login} />\n            <Route path=\"/sign-up\" component={Signup} />\n          </Switch>\n        </div>\n      </div>\n    </div></Router>\n  );\n}\n\nexport default Connection;\n","import React from 'react';\n// import logo from './logo.svg';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Connection from './components/connection/Connection.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Connection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}